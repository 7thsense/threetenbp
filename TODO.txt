/*
 * Copyright (c) 2007-2010, Stephen Colebourne & Michael Nascimento Santos
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name of JSR-310 nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

MathUtils
- can't be public, can't put in java.math as we require JDK5 support

Duration

Instant
- toString/parse

Time scales
- less public classes
- simplified UTC should always have 86400 seconds per day
? more implementations
? gps

Date/Time classes
- factories from Calendrical...
- OffsetDate.atTime(int...)
- LocalDate.plus(PeriodProvider) needs correct algorithm
? remove getChronology()
? getMonthOfYear() -> getMonth(), etc
? getAmPm()

Rules
- ensure can merge MonthDay and Year
- test min/max year for week-based-year
? parse()
? merge -> normalize
? deriveInt for fields
? ISO era

Date/Time formatting
- parse 24:00
- format patterns - yyyy-MM-dd, check details
- strict/lenient parse
- upper/lower case
- only ASCII numbers
- Arabic numbers have negative sign after number
- parseInto(Calendrical)
- default calendrical to pre-define era for example
? isPrintDataAvailable() causes get of field value twice, can we drop method
? substitute text (replacing built in text for Months/DOW etc)

Time zones
- zone rule where time of day is 24:00
- SPI and zone providers
- versions of zone data files

Periods
- formatting (defer?)
- PeriodFields.of(3.25, Hours) -> [3 Hours, 15 Minutes]
- PeriodFields.normalize(Unit...)
- PeriodFields.total(Unit)

Matchers/Adjusters
- DateTimeAdjuster
- weekend?

Calendars
- GJCalendar
- more calendar systems

General
- first day of week
- get month/weekday text
- get rule by name
- get chrono by name
- OffsetDateTime.fromEpochSeconds()
- serialization formats
- evaluate hash codes
- check overflows
- Use ArithmeticException everywhere

Possible items
- Rename DateProvider to LocalDateProvider?
- roll()
- round()
- iteration
- era in the hash codes
- nano of day rule - Long
- ModJulDays rule - BigDecimal
- IntValue interface, implemented by Number/Integer
- public factory for LocalDate.fromDayOfYear(year, doy)
- Optimise LocalDateTime plus/minus times by having a local plus(int,int,int,long,sign,LocalDate) method
- intervals (defer completely?)
- HalfDays period unit for AM/PM (more accurate than 12 hours)


DONE
- getYearMonth(), getMonthDay()
- withXxx() taking Year, MonthOfYear - with(Adjuster)
- zone prev/next transition
- parse API is too complex to parse Date/Time due to merge
- Date/Time parse factories
- DateTimeMatcher -> CalendricalMatcher
- test separable comparators for providers -> CalendricalRule implements Comparator
- isJanuary() ?
- isMonday() ?
- Period rules?
- period units in chronologies?
- Year.of() Duration.of() plus big static class?
- parse optional needs to store and drop back Calendrical properly
- withDayOfYear() tests and everywhere
- toDays() etc, if we keep those classes
- Year.atDay()
- LocalDate.atTime(int...)
- review in line with changes to Duration
- ZonedDateTime plusDurationSeconds() etc
- public access to transitions and transition rules
- OffsetInfo, discontinuity rename to transition
- parse zone


