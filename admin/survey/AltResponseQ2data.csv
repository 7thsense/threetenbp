"Make Date immutable, have year, month, day etc. as public final fields"
"getYY(),getMM(),getDD(),getDD_YY(),getDD_W()"
"date.year(), date.isOnA(Monday),etc..."
now.getDayOfWeek()
"year(), month(), day(), dayOfYear(), dayOfWeek() get prefix is unnecessary noise"
"year(), month() etc merged with the third option"
"getYear(), getMonth(), getDay(), getDayOfYear(), getDayOfWeek(), getWeekOfYear"
"getYear(), getMonth(), getDay()"
"getYear(), getMonth(), getDay()"
getDate()
"getYear(), getMonth(), getDay(), getOfYear(), getOfWeek()"
"getYear(), getMonth(), getDay(), getMonthOfYear(), getDayOfYear(), getDayOfWeek()"
"getYear(), getMonth(), getMonthName(), getDay(), getDayOfYear(), getDayName()"
"getYear(), getMonth(), getDay(), getWeekday()"
"getYear(), getMonthOfYear(), getDayOfMonth(), getDayOfYear(), getDayOfWeek(), getQuarterOfyear(), getQuarterStartDate(), getQuarterEndDate()"
"same as option 2, eventually add internal Enum for a single getDay(DayOf): getDay(DayOf.MONTH/YEAR/WEEK)"
unsure
last option and getWeekOfYear
"getYear(), getMonth(), getMonthName(), getDay(), getDayName(), getDayOfYear()"
"getDay() to get the day of the given date, and getDayOfMonth to get the day within the given month. Also, similar methods with the today prefix, for working with the current date."
"year(), month(), day(), dayofYear(), dayOfWeek()"
"getYear(), getMonth(), getDay()"
getToday()
You know better than me :) if in doubt use joda-time names
perhaps getDayOf(DateUnit) ?
"getYear(), getMonth(), getDayM() or getMonthDay(), getDayY() or getYearDay(), getDayW() or getWeekDay()"
"getYear(), getMonth(), getDayOfMonth(), getDayOfYear(), getDayOfWeek(), getWeekOfYear()"
"getYear(), getMonth(), getDay(), getDayOfYear(), getDayOfWeek(), getWeekOfYear()"
getLastDayOfMonth()
"getYear(), getMonth(), getDay(), getDayOfMonth(), getDayOfYear(), getDayOfWeek()"
"year(),month(),dayOfMonth(),dayOfYear(),dayOfweek()"
"getYear(), getMonth(), getDay(MONTH), getDay(YEAR), getDay(WEEK)"
year();month();day();week()
"year(), month(), day(), dayOfYear(), dayOfWeek() - set methods would share name, but would have argument (e.g. java.nio.Buffer.{limit(), position()} and similar in java.nio.*, java.lang.ProcessBuilder.{command(), directory(), etc.},"
"getYearNoonUTC() etc. The world is inconveniently round, but a time is absolutely meaningless without a timezone. Don't support the flawed notion that it time has meaning without location. This will lead to phenominal amounts of buggy code since most business folks (i.e. project sponsors) don't get timezones and will try to tell programers not to worry about timezones. Force the programmers to understand the issue so that they can respond with appropriate and logical arguments. The existence of such a class would be a detriment to Java's reputation in the long run. Noon UTC will behave well everywhere but perhaps midway etc. When it does misbehave it will be clear why it did so. Do not foster the notion that timezone can be ignored."
"getYear(), getMonth(), getDay(), getDayOfYear(), getWeek()"
