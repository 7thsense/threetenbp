/*
 * Copyright (c) 2007, Stephen Colebourne & Michael Nascimento Santos
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name of JSR-310 nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package javax.time;

/**
 * A time period representing a number of ${type}.
 * <p>
 * ${Type} is an immutable period that can only store ${type}.
 * It is a type-safe way of representing a number of ${type} in an application.
 * <p>
 * Static factory methods allow you to constuct instances.
 * The number of ${type} may be queried using get${Type}().
 * Basic mathematical operations are provided - plus(), minus(), multipliedBy(),
 * dividedBy() and negated(), all of which return a new instance
 * <p>
 * ${Type} is thread-safe and immutable. 
 * 
 * @author Stephen Colebourne
 */
public final class ${Type} implements Comparable<${Type}> {

    /**
     * A constant for zero ${type}.
     */
    private static final ${Type} ZERO = new ${Type}(0);

    /**
     * The number of ${type} in the period.
     */
    private final int ${type};

    /**
     * Obtains an instance of <code>${Type}</code>.
     * 
     * @param ${type}  the number of ${type} the instance will represent
     */
    public static ${Type} ${type}(int ${type}) {
        if (${type} == 0) {
            return ZERO;
        }
        return new ${Type}(${type});
    }

    //-----------------------------------------------------------------------
    /**
     * Constructs an instance using a specific numbr of ${type}.
     * 
     * @param ${type}  the ${type} to use
     */
    private ${Type}(int ${type}) {
        super();
        this.${type} = ${type};
    }

    /**
     * Resolves singletons.
     * 
     * @return the singleton instance
     */
    private Object readResolve() {
        return ${Type}.${type}(${type});
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the number of ${type} held in this period.
     * 
     * @return the number of ${type}
     */
    public int get${Type}() {
        return ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Compares the number of ${type} in this instance to another instance.
     * 
     * @param other${Type}  the other number of ${type}, not null
     * @return the comparator value, negative if less, postive if greater
     * @throws NullPointerException if other${Type} is null
     */
    public int compareTo(${Type} other${Type}) {
        int thisValue = this.${type};
        int otherValue = other${Type}.${type};
        return (thisValue < otherValue ? -1 : (thisValue == otherValue ? 0 : 1));
    }

    /**
     * Is the number of ${type} in this instance greater than that in
     * another instance.
     * 
     * @param other${Type}  the other number of ${type}, not null
     * @return true if this number of ${type} is greater
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isGreaterThan(${Type} other${Type}) {
        return compareTo(other${Type}) > 0;
    }

    /**
     * Is the number of ${type} in this instance less than that in
     * another instance.
     * 
     * @param other${Type}  the other number of ${type}, not null
     * @return true if this number of ${type} is less
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isLessThan(${Type} other${Type}) {
        return compareTo(other${Type}) < 0;
    }

    //-----------------------------------------------------------------------
    /**
     * Is this instance equal to that specified, evaluating the number of ${type}.
     * 
     * @param other${Type}  the other number of ${type}, null returns false
     * @return true if this number of ${type} is the same as that specified
     */
    public boolean equals(Object other${Type}) {
        if (other${Type} instanceof ${Type}) {
            return ${type} == ((${Type}) other${Type}).${type};
        }
        return false;
    }

    /**
     * A hashcode for the ${type} object.
     * 
     * @return a suitable hashcode
     */
    public int hashCode() {
        return ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a new instance with the specified number of ${type} added.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param ${type}  the amount of ${type} to add, may be negative
     * @return the new period plus the specified number of ${type}
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} plus(int ${type}) {
        if (${type} == 0) {
            return this;
        }
        return ${Type}.${type}(MathUtils.safeAdd(this.${type}, ${type}));
    }

    /**
     * Returns a new instance with the specified number of ${type} added.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param ${type}  the amount of ${type} to add, may be negative, not null
     * @return the new period plus the specified number of ${type}
     * @throws NullPointerException if the ${type} to add is null
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} plus(${Type} ${type}) {
        return ${Type}.${type}(MathUtils.safeAdd(this.${type}, ${type}.${type}));
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a new instance with the specified number of ${type} taken away.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param ${type}  the amount of ${type} to take away, may be negative
     * @return the new period minus the specified number of ${type}
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} minus(int ${type}) {
        return ${Type}.${type}(MathUtils.safeSubtract(this.${type}, ${type}));
    }

    /**
     * Returns a new instance with the specified number of ${type} taken away.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param ${type}  the amount of ${type} to take away, may be negative, not null
     * @return the new period minus the specified number of ${type}
     * @throws NullPointerException if the ${type} to add is null
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} minus(${Type} ${type}) {
        return ${Type}.${type}(MathUtils.safeSubtract(this.${type}, ${type}.${type}));
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a new instance with the ${type} multiplied by the specified scalar.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param scalar  the amount to multiply by, may be negative
     * @return the new period multiplied by the specified scalar
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} multipliedBy(int scalar) {
        return ${Type}.${type}(MathUtils.safeMultiply(${type}, scalar));
    }

    /**
     * Returns a new instance with the ${type} divided by the specified divisor.
     * The calculation uses integer division, thus 3 divided by 2 is 1.
     * <p>
     * This instance is immutable and unaffected by this method call.
     * 
     * @param divisor  the amount to divide by, may be negative
     * @return the new period divided by the specified divisor
     * @throws ArithmeticException if the divisor is zero
     */
    public ${Type} dividedBy(int divisor) {
        if (divisor == 1) {
            return this;
        }
        return ${Type}.${type}(${type} / divisor);
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a new instance with the ${type} value negated.
     * 
     * @return the new period with a negated value
     * @throws ArithmeticException if the result overflows an int
     */
    public ${Type} negated() {
        return ${Type}.${type}(MathUtils.safeNegate(${type}));
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a string representation of the number of ${type}.
     * This will be in the format 'PnD' where n is the number of ${type}.
     * 
     * @return the number of ${type} in ISO8601 string format
     */
    public String toString() {
        return "P${stringPrefix}" + ${type} + "${stringSuffix}";
    }

#foreach ($line in $methods)
${line}
#end
}
