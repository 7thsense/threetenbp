/*
 * Copyright (c) 2007, Stephen Colebourne & Michael Nascimento Santos
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name of JSR-310 nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package javax.time.period.field;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import org.testng.annotations.Test;
import static org.testng.Assert.*;

/**
 * Test class.
 *
 * @author Stephen Colebourne
 */
@Test
public class Test${Type} {

    //-----------------------------------------------------------------------
    public void test_isSerializable() {
        assertTrue(Serializable.class.isAssignableFrom(${Type}.class));
    }

    //-----------------------------------------------------------------------
    public void test_factoryZeroSingleton() {
        assertSame(${Type}.ZERO, ${Type}.${type}(0));
        assertSame(${Type}.ZERO, ${Type}.${type}(0));
        assertEquals(0, ${Type}.ZERO.getAmount());
    }

    //-----------------------------------------------------------------------
    public void test_factoryGet${Type}() {
        assertEquals(1,  ${Type}.${type}(1).getAmount());
        assertEquals(2,  ${Type}.${type}(2).getAmount());
        assertEquals(Integer.MAX_VALUE,  ${Type}.${type}(Integer.MAX_VALUE).getAmount());
        assertEquals(-1,  ${Type}.${type}(-1).getAmount());
        assertEquals(-2,  ${Type}.${type}(-2).getAmount());
        assertEquals(Integer.MIN_VALUE,  ${Type}.${type}(Integer.MIN_VALUE).getAmount());
    }

    //-----------------------------------------------------------------------
    public void test_deserializationSingleton() throws Exception {
        ${Type} orginal = ${Type}.ZERO;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream(baos);
        out.writeObject(orginal);
        out.close();
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        ObjectInputStream in = new ObjectInputStream(bais);
        ${Type} ser = (${Type}) in.readObject();
        assertSame(${Type}.ZERO, ser);
    }

    //-----------------------------------------------------------------------
    public void test_compareTo() {
        ${Type} test5 = ${Type}.${type}(5);
        ${Type} test6 = ${Type}.${type}(6);
        assertEquals(0, test5.compareTo(test5));
        assertEquals(-1, test5.compareTo(test6));
        assertEquals(1, test6.compareTo(test5));
    }

    @Test(expectedExceptions = {NullPointerException.class})
    public void test_compareTo_null() {
        ${Type} test5 = ${Type}.${type}(5);
        test5.compareTo(null);
    }

    //-----------------------------------------------------------------------
    public void test_isGreaterThan() {
        ${Type} test5 = ${Type}.${type}(5);
        ${Type} test6 = ${Type}.${type}(6);
        assertEquals(false, test5.isGreaterThan(test5));
        assertEquals(false, test5.isGreaterThan(test6));
        assertEquals(true, test6.isGreaterThan(test5));
    }

    @Test(expectedExceptions = {NullPointerException.class})
    public void test_isGreaterThan_null() {
        ${Type} test5 = ${Type}.${type}(5);
        test5.isGreaterThan(null);
    }

    //-----------------------------------------------------------------------
    public void test_isLessThan() {
        ${Type} test5 = ${Type}.${type}(5);
        ${Type} test6 = ${Type}.${type}(6);
        assertEquals(false, test5.isLessThan(test5));
        assertEquals(true, test5.isLessThan(test6));
        assertEquals(false, test6.isLessThan(test5));
    }

    @Test(expectedExceptions = {NullPointerException.class})
    public void test_isLessThan_null() {
        ${Type} test5 = ${Type}.${type}(5);
        test5.isLessThan(null);
    }

    //-----------------------------------------------------------------------
    public void test_equals() {
        ${Type} test5 = ${Type}.${type}(5);
        ${Type} test6 = ${Type}.${type}(6);
        assertEquals(true, test5.equals(test5));
        assertEquals(false, test5.equals(test6));
        assertEquals(false, test6.equals(test5));
    }

    public void test_equals_null() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(false, test5.equals(null));
    }

    public void test_equals_otherClass() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(false, test5.equals(""));
    }

    //-----------------------------------------------------------------------
    public void test_hashCode() {
        ${Type} test5 = ${Type}.${type}(5);
        ${Type} test6 = ${Type}.${type}(6);
        assertEquals(true, test5.hashCode() == test5.hashCode());
        assertEquals(false, test5.hashCode() == test6.hashCode());
    }

    //-----------------------------------------------------------------------
    public void test_plus() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(5), test5.plus(0));
        assertEquals(${Type}.${type}(7), test5.plus(2));
        assertEquals(${Type}.${type}(3), test5.plus(-2));
        assertEquals(${Type}.${type}(Integer.MAX_VALUE), ${Type}.${type}(Integer.MAX_VALUE - 1).plus(1));
        assertEquals(${Type}.${type}(Integer.MIN_VALUE), ${Type}.${type}(Integer.MIN_VALUE + 1).plus(-1));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_plus_overflowTooBig() {
        ${Type}.${type}(Integer.MAX_VALUE - 1).plus(2);
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_plus_overflowTooSmall() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).plus(-2);
    }

    //-----------------------------------------------------------------------
    public void test_plus_${Type}() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(5), test5.plus(${Type}.${type}(0)));
        assertEquals(${Type}.${type}(7), test5.plus(${Type}.${type}(2)));
        assertEquals(${Type}.${type}(3), test5.plus(${Type}.${type}(-2)));
        assertEquals(${Type}.${type}(Integer.MAX_VALUE),
                ${Type}.${type}(Integer.MAX_VALUE - 1).plus(${Type}.${type}(1)));
        assertEquals(${Type}.${type}(Integer.MIN_VALUE),
                ${Type}.${type}(Integer.MIN_VALUE + 1).plus(${Type}.${type}(-1)));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_plus_${Type}_overflowTooBig() {
        ${Type}.${type}(Integer.MAX_VALUE - 1).plus(${Type}.${type}(2));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_plus_${Type}_overflowTooSmall() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).plus(${Type}.${type}(-2));
    }

    @Test(expectedExceptions = {NullPointerException.class})
    public void test_plus_${Type}_null() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).plus(null);
    }

    //-----------------------------------------------------------------------
    public void test_minus() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(5), test5.minus(0));
        assertEquals(${Type}.${type}(3), test5.minus(2));
        assertEquals(${Type}.${type}(7), test5.minus(-2));
        assertEquals(${Type}.${type}(Integer.MAX_VALUE), ${Type}.${type}(Integer.MAX_VALUE - 1).minus(-1));
        assertEquals(${Type}.${type}(Integer.MIN_VALUE), ${Type}.${type}(Integer.MIN_VALUE + 1).minus(1));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_minus_overflowTooBig() {
        ${Type}.${type}(Integer.MAX_VALUE - 1).minus(-2);
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_minus_overflowTooSmall() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).minus(2);
    }

    //-----------------------------------------------------------------------
    public void test_minus_${Type}() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(5), test5.minus(${Type}.${type}(0)));
        assertEquals(${Type}.${type}(3), test5.minus(${Type}.${type}(2)));
        assertEquals(${Type}.${type}(7), test5.minus(${Type}.${type}(-2)));
        assertEquals(${Type}.${type}(Integer.MAX_VALUE),
                ${Type}.${type}(Integer.MAX_VALUE - 1).minus(${Type}.${type}(-1)));
        assertEquals(${Type}.${type}(Integer.MIN_VALUE),
                ${Type}.${type}(Integer.MIN_VALUE + 1).minus(${Type}.${type}(1)));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_minus_${Type}_overflowTooBig() {
        ${Type}.${type}(Integer.MAX_VALUE - 1).minus(${Type}.${type}(-2));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_minus_${Type}_overflowTooSmall() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).minus(${Type}.${type}(2));
    }

    @Test(expectedExceptions = {NullPointerException.class})
    public void test_minus_${Type}_null() {
        ${Type}.${type}(Integer.MIN_VALUE + 1).minus(null);
    }

    //-----------------------------------------------------------------------
    public void test_multipliedBy() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(0), test5.multipliedBy(0));
        assertEquals(${Type}.${type}(5), test5.multipliedBy(1));
        assertEquals(${Type}.${type}(10), test5.multipliedBy(2));
        assertEquals(${Type}.${type}(15), test5.multipliedBy(3));
        assertEquals(${Type}.${type}(-15), test5.multipliedBy(-3));
    }

    public void test_multipliedBy_negate() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals(${Type}.${type}(-15), test5.multipliedBy(-3));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_multipliedBy_overflowTooBig() {
        ${Type}.${type}(Integer.MAX_VALUE / 2 + 1).multipliedBy(2);
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_multipliedBy_overflowTooSmall() {
        ${Type}.${type}(Integer.MIN_VALUE / 2 - 1).multipliedBy(2);
    }

    //-----------------------------------------------------------------------
    public void test_dividedBy() {
        ${Type} test12 = ${Type}.${type}(12);
        assertEquals(${Type}.${type}(12), test12.dividedBy(1));
        assertEquals(${Type}.${type}(6), test12.dividedBy(2));
        assertEquals(${Type}.${type}(4), test12.dividedBy(3));
        assertEquals(${Type}.${type}(3), test12.dividedBy(4));
        assertEquals(${Type}.${type}(2), test12.dividedBy(5));
        assertEquals(${Type}.${type}(2), test12.dividedBy(6));
        assertEquals(${Type}.${type}(-4), test12.dividedBy(-3));
    }

    public void test_dividedBy_negate() {
        ${Type} test12 = ${Type}.${type}(12);
        assertEquals(${Type}.${type}(-4), test12.dividedBy(-3));
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_dividedBy_divideByZero() {
        ${Type}.${type}(1).dividedBy(0);
    }

    //-----------------------------------------------------------------------
    public void test_negated() {
        assertEquals(${Type}.${type}(0), ${Type}.${type}(0).negated());
        assertEquals(${Type}.${type}(-12), ${Type}.${type}(12).negated());
        assertEquals(${Type}.${type}(12), ${Type}.${type}(-12).negated());
        assertEquals(${Type}.${type}(-Integer.MAX_VALUE), ${Type}.${type}(Integer.MAX_VALUE).negated());
    }

    @Test(expectedExceptions = {ArithmeticException.class})
    public void test_negated_overflow() {
        ${Type}.${type}(Integer.MIN_VALUE).negated();
    }

    //-----------------------------------------------------------------------
    public void test_toString() {
        ${Type} test5 = ${Type}.${type}(5);
        assertEquals("P${stringPrefix}5${stringSuffix}", test5.toString());
        ${Type} testM1 = ${Type}.${type}(-1);
        assertEquals("P${stringPrefix}-1${stringSuffix}", testM1.toString());
    }

}
