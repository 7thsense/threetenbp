/*
 * Copyright (c) 2007, Stephen Colebourne & Michael Nascimento Santos
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name of JSR-310 nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package javax.time;

/**
 * A time field representing a ${desc}.
 * <p>
 * ${Type} is an immutable time field that can only store a ${desc}.
 * It is a type-safe way of representing a ${desc} in an application.
 * <p>
 * Static factory methods allow you to construct instances.
 * The ${desc} may be queried using get${Type}().
 * <p>
 * ${Type} is thread-safe and immutable.
 *
 * @author Stephen Colebourne
 */
public final class ${Type} implements RecurringMoment, Comparable<${Type}> {

    /**
     * A serialization identifier for this instance.
     */
    private static final long serialVersionUID = 1L;

    /**
     * The ${desc} being represented.
     */
    private final int ${type};

    //-----------------------------------------------------------------------
    /**
     * Obtains an instance of <code>${Type}</code>.
     *
     * @param ${type}  the ${desc} to represent
     * @return the created ${Type}
     */
    public static ${Type} ${type}(int ${type}) {
        return new ${Type}(${type});
    }

    //-----------------------------------------------------------------------
    /**
     * Constructs an instance with the specified ${desc}.
     *
     * @param ${type}  the ${desc} to represent
     */
    private ${Type}(int ${type}) {
        this.${type} = ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the ${desc} value.
     *
     * @return the ${desc}
     */
    public int get${Type}() {
        return ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Compares this ${desc} instance to another.
     *
     * @param other${Type}  the other ${desc} instance, not null
     * @return the comparator value, negative if less, postive if greater
     * @throws NullPointerException if other${Type} is null
     */
    public int compareTo(${Type} other${Type}) {
        int thisValue = this.${type};
        int otherValue = other${Type}.${type};
        return (thisValue < otherValue ? -1 : (thisValue == otherValue ? 0 : 1));
    }

    /**
     * Is this ${desc} instance greater than the specified ${desc}.
     *
     * @param other${Type}  the other ${desc} instance, not null
     * @return true if this ${desc} is greater
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isGreaterThan(${Type} other${Type}) {
        return compareTo(other${Type}) > 0;
    }

    /**
     * Is this ${desc} instance less than the specified ${desc}.
     *
     * @param other${Type}  the other ${desc} instance, not null
     * @return true if this ${desc} is less
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isLessThan(${Type} other${Type}) {
        return compareTo(other${Type}) < 0;
    }

    //-----------------------------------------------------------------------
    /**
     * Is this instance equal to that specified, evaluating the ${desc}.
     *
     * @param other${Type}  the other ${desc} instance, null returns false
     * @return true if the ${desc} is the same
     */
    public boolean equals(Object other${Type}) {
        if (this == other${Type}) {
            return true;
        }
        if (other${Type} instanceof ${Type}) {
            return ${type} == ((${Type}) other${Type}).${type};
        }
        return false;
    }

    /**
     * A hashcode for the ${desc} object.
     *
     * @return a suitable hashcode
     */
    public int hashCode() {
        return ${type};
    }

#foreach ($line in $methods)
${line}
#end
}
