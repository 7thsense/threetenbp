/*
 * Copyright (c) 2007, Stephen Colebourne & Michael Nascimento Santos
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name of JSR-310 nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package javax.time.calendar.field;

import javax.time.calendar.Calendrical;
import javax.time.calendar.CalendricalState;
import javax.time.calendar.TimeFieldRule;
import javax.time.duration.Durational;

/**
 * A time field representing a ${desc}.
 * <p>
 * ${Type} is an immutable time field that can only store a ${desc}.
 * It is a type-safe way of representing a ${desc} in an application.
 * <p>
 * <b>Do not use ordinal() to obtain the numeric representation of a ${Type}
 * instance. Use get${Type}() instead.</b>
 * <p>
 * ${Type} is thread-safe and immutable.
 *
 * @author Michael Nascimento Santos
 * @author Stephen Colebourne
 */
public enum ${Type} implements Calendrical {

#foreach ($singleton in $singletons)
    /**
     * ${singleton.desc}
     */
    ${singleton.type}(${singleton.value}),
#end
    ;
    /**
     * The rule implementation that defines how the ${desc} field operates.
     */
    public static final TimeFieldRule RULE = new Rule();

    /**
     * The ${desc} being represented.
     */
    private final int ${type};

    //-----------------------------------------------------------------------
    /**
     * Obtains an instance of <code>${Type}</code>.
     *
     * @param ${type}  the ${desc} to represent
     * @return the existing ${Type}
     */
    public static ${Type} ${type}(int ${type}) {
        switch (${type}) {
#foreach ($singleton in $singletons)
            case ${singleton.value}:
                return ${singleton.type};
#end
            default:
                throw new IllegalArgumentException("${Type} cannot have the value " + ${type});
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Constructs an instance with the specified ${desc}.
     *
     * @param ${type}  the ${desc} to represent
     */
    private ${Type}(int ${type}) {
        this.${type} = ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the ${desc} value.
     *
     * @return the ${desc}
     */
    public int get${Type}() {
        return ${type};
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the calendrical state which provides internal access to this
     * ${Type} instance.
     *
     * @return the calendar state for this instance, never null
     */
    @Override
    public CalendricalState getCalendricalState() {
        return null;  // TODO
    }

#if (${bound})
    //-----------------------------------------------------------------------
    /**
     * Gets the next ${desc} wrapping so that the next ${desc}
     * is always returned.
     *
     * @return the next ${desc}, never null
     */
    public ${Type} next() {
        return values()[(ordinal() + 1) % ${singletons.size()}];
    }

    /**
     * Gets the previous ${desc} wrapping so that the previous ${desc}
     * is always returned.
     *
     * @return the previous ${desc}, never null
     */
    public ${Type} previous() {
        return values()[(ordinal() + ${singletons.size()} - 1) % ${singletons.size()}];
    }

#end
    //-----------------------------------------------------------------------
    /**
     * Is this ${desc} instance greater than the specified ${desc}.
     *
     * @param other${Type}  the other ${desc} instance, not null
     * @return true if this ${desc} is greater
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isGreaterThan(${Type} other${Type}) {
        return compareTo(other${Type}) > 0;
    }

    /**
     * Is this ${desc} instance less than the specified ${desc}.
     *
     * @param other${Type}  the other ${desc} instance, not null
     * @return true if this ${desc} is less
     * @throws NullPointerException if other${Type} is null
     */
    public boolean isLessThan(${Type} other${Type}) {
        return compareTo(other${Type}) < 0;
    }

#foreach ($line in $methods)
${line}
#end
    //-----------------------------------------------------------------------
    /**
     * Implementation of the rules for the ${desc} field.
     */
    private static class Rule extends TimeFieldRule {

        /** Constructor. */
        protected Rule() {
            super("${Type}", null, null, ${minValue}, ${maxValue});
        }
#foreach ($line in $ruleMethods)
${line}
#end
    }

}
