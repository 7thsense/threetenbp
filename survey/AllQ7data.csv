Response
"Nanosecond is a whole word, there is no such thing as ""Nano"", and ""Nano of a second"". It's nanosecond."
"""if I saw getDay() I would assume ""... nothing and check the JavaDoc until I learned"
"Natural use has priority to simplest naming i.e. When you give time, its HH:MM:SS,mmm, those three numbers must be available under getHour, getMinute, getSecond, getNano(|Second)...
Secondary uses get secondary names i.e. getDayOfWeek (by the way, it may return a Day enum).
Enum holds both a litteral (string) name and an ordinal (may it goes from 1 to 12 ?)

Thanks for asking !"
"leverage JodaTime conventions if possible - it will help that many people won't have to re-learn

I am split on 5). I'd likely go w/ option 1 if I had no other choice"
getDay is never correct as there are multiple possible meanings. getHour is correct as there is only one possible meaning. If all other getXXX return an int then getMonth must return an int.
"Names should be as long as necessary to convey the idea and no longer. Shorter names should be reserved for the common cases (e.g. getDay() for get day of month) and use longer names for the less used cases (e.g. getDayOfYear()).

Do not abbreviate words e.g. getNanosecond() vs. getNano()--with IDE code completion it's not a big deal for writing but it is a big deal for reading."
"Method name length should be increased only when unclear. There should be no need for MonthOfYear, because that's the only way month is represented (MonthOfX is only valid where X == Year; compared to DayOfX, where X is a set {Year, Month, Week})"
"There are thousands of Java developers who don't have English as their main language, consider avoiding cultural assumptions (i.e. some people think day-month-year, while others year-month-day)"
"q4) (assume 'now' is current time of day)
now.getNanoOfSecond - wrong 'now' is not in seconds its a timeofday 
now.getNano - good if nano's from midnight wrong if in seconds (maybe as given in other options)"
Avoid get before method names
Method names don't need to be too explicit as everything in Java has context. There's nothing wrong with getDay() as long as it is used within the context of a larger time period. e.g. if we are talking about weeks then I expect getDay() to get the day of the week whereas if we are talking about months I would expect it to be day of the month. Don't be one of those people that puts the letters impl at the end of their class names. That's implied.......
"I find all the ""Of year"", ""Of month"", etc naming conventions unnecessary. There is a reasonable expectation that getDay will return 1-31."
"Considering the modern IDE can show all possible methods, the associated javadoc and auto complete the method name  (eg ctrl+space in eclipse) I would keep the model as simple as possible to represents date and time, but the utilities methods (e.g. Date conversion UTC to GMT) very clear and with a consistent name convention."
"Essentially if I see 20120609 I think year, month, day. Americans will think month, day, year when they see 06092012 and Europeans will think day, month, year.
Hence those are the obvious names for year, monthOfYear and dayOfMonth. The extra information is assumed and anything else will be confusing or tedious.
Basically this pattern trumps the need for consistency.

There is never a good reason to read Javadoc. My IDE is set to automatically hide all comments."
Consider auto-complete and dynamic help provided by development enviornments - I do not use text pad anymore!
"enums for months are contraproductive with respect to other calendars.
Names (for months or days or eras) are locale dependent."
"Stuff like getMonthOfYear / getHourOfDay is definitely too much. 

Differentiating on day-of-* may be useful. On the other hand the major use case of getting the day is day-of-month, so I would use getDay for that one."
"Quick to write, and length of method is irrelevant in an era of code completing IDEs.  Readability is the only concern."
"We shouldnt go for verbosity for verbosities sake but everything should be unambiguous in its context and as much as possible consistent in the general API. 
 people familiar with Calendar ints will still heav flash backs and nightmare bugs if you return ints and not enums in places where there is a chance for index by 1 or 0."
"On getMonthOfYear() : which other type of getMonthOfXXX would you have? It seems pointless - you would not want month of decade?

However, getDay() is ambiguous - getDay for the week? Month? Year?"
It should be self explanatory
"If auto-complete on 'getD' showed getDay(), getDayOfWeek() and getDayOfYear(), it'd be obvious enough that getDay() returned the day of the month.

getDayOfMonth() seems a bit verbose, but isn't much worse."
"assuming date and time classes are immutable, theres little point in prefixing them with get as there is no corresponding set (eg date.month()).

using methods that return boolean for queries on enums are usually clear and provide better encapsulation, eg, date.isIn(MARCH) vs date.month() == MARCH"
Keep the most common cases short (single word).
no
"Avoid unnecessary ambiguity, for instance getTime()"
Methods should not surprise or have side effects.
Prefer not too many similarly named methods on one class as leads to confusion and reduced IDE autocomplete effecacy
The abstraction reprenting by the method name must talk to real human (not only programmer)
Deviating from what java.util.Date and/or java.util.Calendar have used is going to cause confusion. I think it best to use their naming as a model in spite of the shortcomings in the rest of the API.
"I would hazard that the vast majority of Java developers use an IDE with auto-complete, so typing and length-of-name issues are almost non-existent. And when reading from a popup list of method names, it should be clear what the method is going to do. So, preferably, as long as necessary to be unambiguous, but no longer.

Ambiguity is present in days – Is it the day of month, day of week, or day of year? – so a longer, unambiguous name is better (e.g. getDayOfWeek()). That problem is not inherent in the relationship between hours/minutes/seconds/nanos – few people care about the nth hour of the month – so there is no need to lengthen the names."
"Actually, make em as in .NET, easy to read, understand and use."
Need thread safe class to increment time / date.
"MonthOfYear? are there other concepts of Month? on the other hand, it's a good differentiator from getMonth(), and plays even better with getMonth -> Enum (get a REAL Month), getMonthOfYear -> int (get me the nth month). By the way, will January be 0 or 1? There will be blood on that one, either way."
"I prefer that the methods that I use the most have the shorter names, as long as they're clear.  If you want there to be a method that returns an enum, I think I'd prefer aDate.getMonth() to return an int, and aDate.getMonthEnum() to return the enum, because I'll rarely use the enum version but would like the difference to be clear."
Hope that the API supports these ideas across different Chronologies and not just the Gregorian chronology.
"don't repeat yourself, think object, concept :
If the class represent an entity ""date"", no need to precise that day is the day of the month and not of the week ! That's clear.
The more concise (and clear of course) is the best. 
If you have a lot of methods in the class ....then you need to read the javadoc to understand the subtile differences."
No
Nope
focus on the most common use cases and use verbose methods for more special things like dayOfYear or dayOfWeek
Hard choice. good luck.
"Short names should not drive the naming choice, answer to that can be auto completion. Over-explicit names should be avoided too, when I read getMonthOfYear I simply wonder getMonthOfWhatElse ? Ambiguity is also a thing try to avoid, it makes people assume the expected behavior, and sometime we assume wrong :)"
"I favor unambiguous, consistent naming. I prefer terse APIs, but not to the point where terseness leads to ambiguity.

The question I'm most uncertain about is #5 (month-of-year enum vs int), as I can see common use cases for both int and the enum value. However, I think returning the enum and having the enum contain the ordinal value is cleaner than the other suggestions."
"javabean style get prefix is an unnecessarily noisy convention.

overloading the API for ordinals rather than simply accessing them via secondary access is unnecessary. Prefer:

int month = date.month().ordinal();"
"One potential naming convention is that the shortest names should be in reference to the next bigger increment of size. For example getDay() could be days of a week. However, we don't communicate dates using all the units going from biggest to smallest. For example, we could write our dates like this:
Year Month WeekOfMonth DayOfWeek (as in 2012 May 2 Wednesday)
This is confusing though, because we don't know which day of the week we start the month on. So there's a good reason the default is 2012 May 9. For the same reason, I think getDay() should return the day of the month."
"Discoverability: If I see a getYear(), I *assume* there's also a getDay(). I'd never guess a getDayOfMonth(), so I think the day/month/year combination (as used in the ""real world"") has better discoverability."
"Is day DayOfWeek an enum? If not, it should."
"support for financial years? attribution of week to year during overlaps? week to month?
ok, not related to method naming but these use cases explain why getMonthOfYear is a good idea because there may be many cases - getMonthOfFinancialYear, getYearOfWeek etc"
"The shorter forms suggested are the default ways those components are discussed in normal language in the context of the object. Given the date X what is the month, not Month of Year.  Longer forms should be reserved for the less natural meanings."
"Choosing a name that satisfies all of a bunch of mutually contradictory goals is a real trick in API design. Doesn't make the goals any less important. That's why they're almost all a 1.

Modern IDEs serve up javadoc very conveniently. The need to read it should not be seen as a problem with the API."
no
"1. Avoid verbose disambiguation when the meaning is obvious e.g. getHour() over getHourOfDay()
2. Avoid ambiguity e.g. getDay() : of what.. week, month year?
3. Are there calendar / chronology systems that don't work with the familiar year, month, day, hour, minute, second terms - that need special naming handling?"
"Consistency above all else. You can't please everyone, but you can please no one. Good luck."
"People use these in everyday life, and use certain terms with expected meanings.  That should drive the design.  The general conventions for 'common' use are year, month (January, February, etc), day (which is 99.9% for day of month), hour, minutes, seconds.  You should use verbose forms for the uncommon uses, such as day of year, month number, month abbrev, etc."
"Why do you need to say getMonthOfYear -- what other month is there?  GetMonthOfDecade?
For Day, it makes sense to differentiate between day of month vs day of year."
Methods should be clear. It doesn't matter if they are too long or too verbose.
"""Balance of short and clear"" is the most important point here, I believe. Clarity should take priority though. So, first of all, method name has to be clear and only then - as short as possible (without losing clarity)."
"getYear, getMonth, getHour, getSecond, etc., need no further explanation because their scope is unambiguous.  Day (unfortunately!) has two scopes and so can benefit from the additional clarity.

Enum for month because there is ambiguity between zero-indexed months and one-indexed months.  None of the other values have such an ambiguity."
"We have code completion, thus length or number of characters is not an issue at all, right?"
no
"Unambiguous methods, like getMonth(), should not have suffixes, like OfYear, as there is no other OfSomething. 
Ambigous methods like getDay() should not exist at all, it should always be getDayOfMonth(), getDayOfYear(), getDayOfWeek(). 
So IMHO only unambiguous names should be short, other should be longer to remove the ambiguity."
Take good parts from JODA time APi
"There are 2 forms of unambiguous:
- Ambiguous with other methods in the same API. This is very bad (agree level 1).
- Ambiguous as to what are it's side effects. This is less bad (agree level 3). It's often impossible and impractical to name all side effects in the method name. That's why we have javadocs."
Read time over write time. Zelf documenting
succinct but definitely not cryptic
"#6 table really wants a ""Concise"" option, such I suspect that ""balance of short and clear"" covers that."
"MonthOfYear and DayOfYear etc etc must NOT be zero-based. December must IMNSHO be number 12 (not 11 thank you!). This must be kept consistent with HourOfDay, MinuteOfHour and the way people generally think about ordered things.
An enum for e.g. Month is a good idea since it can contain the number of the month (1-12) as well as the number of days in the month (0-31) (yes, leap year is a problem there).
Best of luck! ///Anders"
"I think you can rely on other method names to disambiguate a method, since code completion tools usually show a list of methods. If I don't know a class, but I see it has both getDay() and getDayOfWeek() methods, I will assume the getDay() method means day of month."
"Not naming really, but please - months should be numbered 1-12, not 0-11!"
"The JDK Date and Calendar namings is a disaster, ambiguous and assuming too much thing silently. IDE now provide completion which make method naming length a lower issue than 15 years ago.

Thank you for your work on Joda Time, this library is a real pleasure to use.
Regards,"
"When you see a method, it should be clear what the method is doing/returning. So make methodnames meaningfull instead of to short."
Drop the enums. Make getZeroBasedXX methods that return zero based month and day of week. Do not overengineer. A good API is an API that is straightforward to the user and doesn't surprise. Complexity is bad.
"With code completion in ides long method names become less of an aggravation.  
Unless we are forced to use notepad or vi clarity and consistency should always take precedence over method name shortness."
"It's date and time, everybody will use it often. Now it's cumbersome and requires reading either way - long method names don't matter so much and most often the usage is for mainstream cases - where getDay should get day of month, not year nor week."
Concise & Consistent rules.
"For immutable objects, such as time related objects, it might be useful to consider the following option:

time.minute, time.second, time.nano

If the hosting class file is immutable, the fields inside may be public final fields, thus allowing their use is very concise way. Getters could exist for POJO and bean use."
I prefer property based retrievers over getters. monthOfYear() over getMonthOfYear.
The more intuitive the better
"It's considered a good practice that method names describe somehow its parameters.

I'd like to propose the following syntax for methods:

example 1)  

traditional way:  

add(2,3);

add(int a, int b) { ..}



proposed: 

add(2)plus(3);  

add(int a)plus(int b)  { .. }





example 2)  

traditional way: 

perform(tiles, request, response, context);

perform(ComponentContext tilesContext,
                       HttpServletRequest request,
                       HttpServletResponse response,
                       ServletContext servletContext) {... }



proposed:

performWithTiles(tiles)theRequest(request)returning(response)inContext(context);


performWithTiles(ComponentContext tilesContext)theRequest(HttpServletRequest request)returning
(HttpServletResponse response)inContext(ServletContext servletContext) { ... }



example 3) 

traditional way:

getItemFromFile(file,item);

getItemFromFile(File file,String item)  { .. }




proposed:

getItem(item)FromFile(file);

getItem(String itemfromFile(File file)  { .. }"
"In the case of the date methods, I think it shoud be short but clear. Date methods are functions you will be use mostly everyday."
"Naming should be shortest possible, but not like getDoY(), It's more important that it's absolutely clear what the method does."
"I think now an API should be designed considering the fact, that most of the developers use IDEs in 90% of their time. IDEs are smart. They show you the Javadoc (""No need to read Javadoc""), complete the parameters, etc..."
Make it idiot proof
"These are all valid goals and well in general this also depends much on context ... API or not? internal or external? tests or product?

Sometimes I prefer conciseness, sometimes verbosity - of course not all at the same time ;-) ..."
"'Clear when read' to means concise, among other things. You have to know what your doing when using dates anyway, as with any other API, so having to read up on the specifics of the various functions is not a problem in my view. It would be great if names like getYear, getMonth and getDay were so short because you coul tell in an instant what was going on. It's DWIM to me."
"For question 8: I'd like to use Joda-Time, but only if it was in JDK. All other libraries use Date so I don't want to wrap/unwrap it again and again."
I'm sending and e-mail to Stephen Colebourne with my suggestions.
method naming choice might be influenced by social and linguistic norms. This might be problematic given the variance of said norms from region to region.
"KISS (Keep it Short & Simple)
- In common language, when talking about dates we simply use ""month"" (for month of year), ""day"" (for day of month), etc.
- Avoid mixing zero-based integer (e.g. month) and integer starting from 1 (e.g. day). Both should start from 1."
nobody writes javacode outside an ide now which does autocomplete and javadoc. It is not necessary to worry about the length of method names (other than writing code that reads like a bad novel!).
Names should be the shortest they can be while providing as little ambiguity (primary concern) as possible.
"Please January = 1 !!!!
Please nice builders to create date/time/datetime."
"The current method naming convention in threeten is perfect and one of the things I like most about the library.  In fact, prior to using it, I was writing a small date library for GWT and came up with an eerily similar naming convention independently.

One thing I'd possibly like to see changed (slightly OT) is ZonedDateTime.now().  I think it would be beneficial to enforce the user to always pass the ZoneId.  ZonedDateTime.now(ZoneId)

Although it would no longer be consistent with Instant.now(), I think this is actually a good thing."
"Most of the times I want the day within a month. That's why I think that getDay() should return the day of month and instead of getDayOfMonth, have a method named getDayOfWeek() which, to me, is much less used plus, it has 1 character less to write :-)"
None
"Not on method naming so much as organization: put all these things in its own package. java.util.Month is not as clear as java.util.date.Month. We all agree dealing with dates is big, it deserves its own package, if only to help make the API a whole lot clearer and unambiguous."
dontGiveMeAnAPIThatHasSuchLongNamesThatItTakesAWeekendToRetrieveTheDateAndTime
"Joda time is a good model to follow.  There are some inconsistencies with it, but its what I've been using for years."
"Short is better.  This class will be used a lot.  getDay() should be fairly obvious, especially when the other option is getDayOfYear() clearly indicates what is happening.  Also, January should be 1, not 0."
"Too bad you have to have the Java Bean ""get"" prefix."
"Avoid redundancy: getMinuteOfHour() provides no more context of getMinute()... though possible to consider number of minutes in the context of a day, say, it is far from the common case. Adhering to a pattern here would be silly."
"Please keep the access to data as simple as possible e.g. 
Bad        int month = getMonth().getValue(); 
Good      int month = getMonth();

What about overloading a getMonth(), getYear() and getDay() to return the 'name' if the return type is a string, the numeric value if the return type is int etc. IMO it would make very consistent coding without adding all the boilerplate of the original date implementation."
"I suggest following the Microsoft conventions for DateTime.  They were faced with the same questions and came up with a sensible solution.  On top of that, by following their convention, you make it easier on the many developers who straddle both languages.

By the way, some of these issues wouldn't be so bad if Java had implicit conversion like Scala.  Then your API could simple be getYear(), getMonth(), getDay() all returning int.  Instead of so many methods, you'd have implicit conversions to convert everything.  Except dayOfWeek, but you could still have an implicit conversion from LocalDate to DayOfWeek, as many of the Joda/Scala wrappers do."
"Balance clarity and brevity.  These classes will be used so frequently that competent Java developers will become accustomed to any shortcomings in immediate meaning, e.g. the behavior of getDay()."
prefer single words that can be used as a DSL
"I think in most APIs context is King. Ambiguity in method naming becomes a bit easier when the context of the object is in play. For instance, if I write something like newDateObj.getSecond() its not clear, but if I write newDateObject.getDayOfMonth().getHour().getMinute().getSecond() suddenly the string of fluent calls lends a context that tells me the parameters of getSecond(), namely that it will be between 0 and 59. This allows slightly shorter and more concise naming. However, it does introduce some lengthy code calls as evidenced in my example. For any core API I think the overriding concept should be KISS."
Verbose unambiguous names is a high-cost for the bogus goal of an API that doesn't need docs
"Should be able to guess the intent with out reading the API. And consistent across date, time, and, other temporal classes in java.util and java.sql also."
Current time in millis since epoch is already available but what about current seconds since epoch used by other systems/languages?
"Don't forget date creation.
It is a pain to create date without Joda-Time."
Very important: Consistent!! + Balance of short and clear
"In the case that the method is not too long to describe the whole text, the worst case is that you have to review the javadoc one time to understand and learn."
.
"Long and clear is WAY better than short and dubious. 
We all have HUGE screens now with huge resolution, we all have IDEs with auto-complete, we all have huge memories and we don't need to limit to 8 characters or less when naming things."
None. The above list is quite exhaustive.
Avoid naming anything as a description of their implementation as much as possible. Example: AbstractSingletonProxyFactoryBean is an atrocious name that means nothing to someone who's trying figure to figure out what to use it for. As far as a philosophical reason: It breaks encapsulation.
"it would be an advantage to also be able to do simple day/time based calculations with a functional style API (i.e. thinking about BigDecimal add(), substract()... methods)"
"it doesn't really matters if they are long, as long as they are clear."
"I think that brevity when possible, and longer names when necessary is a good balance; consistency should be relaxed if necessary (it's nice to have but not the only or most imporant goal).
Javadocs can still be inspected in case of doubt: different people have different intuitions.
I used to believe more in long-if-need-be to maximize consistency, minimize ambiguity -- I have learnt over time, with experience that smart people do not need to be nannied that way, and it's better to ""use common sense"" -- only few would be confused by 'getDay()' choice of day-of-month I think, or offended by lack of consistency (wrt getDayOfWeek/-Year)."
"Shorter is better, leaning to more verbose when there are multiple options that deviate from the default."
No
Keep it simple !
"Read code  with ""Joda Time"", even with Ruby (time.rb) and C#. In order to got a pleasure API.

I agree wit getting a powerful API, not one that keep me guessing ""what's going on?"".
String API in Java is actually poor in methods. I think another epic fail. Keep it simple, but maybe you guys are able to introuduce something like ""Collections"" Class.  ""Date  & Time"" mus be the power utility that other languages envy."
"Develop the API thinking that most of programers think in a date and time with some format like '2012/05/10' or '11:10:10 AM', it should guide the names for clases and methods."
I'v always appreciated when method call chains can be read almost lika a sentence eg. Mockito
Why don't You use JodaTime?
Please include joda time
"You are probably approaching this problem too, but the java.util.Date method called getTime() has probably the worse name ever."
"Are we talking POSIX or normal (English localisation?) month int?

Dates are primarily split as year-month (of year)-day (of month). Week is kind of an orthogonal issue, and day of year (or month of decade or whatever) is secondary for non-specialist purposes."
Perhaps getDayOfWeek() could be getWeekDay()? Also it is not completely clear whether that method returns the day's number (ie. 0 for sunday/monday) or the name of the day (ie. monday)
"In my eyes the only misinterpretable method is 'getDay(). 

But here my IDE tells me, that there exist 'getDayOfWeek()' and 'getDayOfYear()' as well, so that I then know that 'getDay()' in fact is day of month => Keep it short."
"getDay() requires verbosity because Day can be represented several ways - day of the week, day of the month, day of the year. getMonthOfYear() is wrong (IMHO) because month only has one basic representation - month in a year."
"The terms I use when describing dates are: Year, Month, Day, Day of Week.  I never actually refer to the Day of Year, so no comment.
The terms I use when describing time are: Hour, Minutes, Seconds, Nanoseconds.  I've never heard the term ""nano of second"" — is this a copy-paste mistake?"
Nope.
don't break time zones
thanks for your effort! I hope Java will have a clean data API at last!
"Dates are tipically represented as a day, a month and a year. We all asume day represents day of month and month represents month of year. So I chose de less verbose and the clearer form.

I'd also like to say sth about having an enum for month: since we can have no emun for year and day, it's weird (and ugly) using an int for them and an enum for months. Besides, we don't need an enum to make clearer the use of months: month 3 is not an odd code that we have to translate, everybody knows that month 3 is march (first month is 1, not 0, of course :) ). And being able to iterate over the enum is not reason enough to make mor complex the API."
Use Joda Time FFS and disregard all input I gave you.
Love to feel you are hearing us! :)
"This naming is only part of the problem. A much bigger issue are the (IMHO) flawed concepts and overall design. JSR-310 is better than Joda and java.util anything, but it is still lacking in accuracy and layering.

There are effectively only a handful of concepts at a ""scientifical"" level, which should form the basis; PointInTime, TimePeriod (from-to) and Periodicity (recurring), which then can be combined in many ways for more complex concepts (meeting every Monday at 12:30-13:00 until Sept 12 this year). But the REPRESENTATION is different thing, and right now it feels like there is a poor separation of those.

I have mentioned my concerns to Colebourne, but he disagrees and make a strong argument for the blur that I think still exists."
"Looks like good thought has gone into it. JodaTime is good, but not 100% perfect. I really enjoy doing Time and Date operations in Ruby. Maybe my preference for conciseness over Verbose comes from that (or too many Calendar.getInstance() calls !)"
"for everyone, ""day"" IS the ""day of month"", no need to specify more"
"ad question 5: I am aware the first option leads to clean and narrow API surface, however the getMonthInt would be practical"
January should be 1 not 0
"Not explaining the issue of getMonth returning an enum, while others return ints, naively favored the simpler api. On retrospect, it becomes a harder choice and I'd favor consistency by returning an int. However, millis and nanos being longs would be a break, but a minor one. So I'd favor getMonthOfYear being the enum as the special case and/or have Month accept an int valueOf factory method."
No
"Why do not have a method return how many days of  one month in this year ,Like Year(2012).Month(January).days() = 31;"
"ad 5) may ""enum getMonth()"" return null? If so, then getMonthInt() is nice, otherwise it's not necessary."
"getters and setters are an antipattern to many, it's too bad so many frameworks rely on it. Without taking those into consideration, a method like dateVariable.month() is better to me than dateVariable.getMonth()."
"This will be a heavily used API - programmers will learn moderate ambiguity. Focus on pattern usage - the more frequently used method, the shorter name it should have."
"The first things comes in mind when you read the method name. If it relates with the result, we should name in that way. e.g getMinute() means obviously minute of the hour. Hence getMinuteOfHour does look right here."
I think consistency and clarity of the API is the most important.
It must be clear to understand however it must not be too long. The developer must understand what it is for before looking at java doc or making a simple example of it.
Clarity when reading code is the most important.
"Just clarify that for me Agree = 5 is the greatest. See ""Clear when read"" for instance..
Anyway there are only 4 radio buttons when the numbers are from 1 to 5.."
".NET's DateTime is way better that Java's Calendar or whatever (native), just copy the API and be happy. Also include a TimeSpan object"
"Month implies month-of-year, so getMonth() would be sufficient."
"Call data nouns, actions verbs. Keep the names simple and the names that match how you would verbally explain things to other people. The language already has a simple pattern ""verbNoun"", so hold to that consistently whenever possible (so that anyone's guess is most likely correct). Type out coding examples without looking at what you have done, and if what you typed doesn't match what you have, fix what you have (most of the time). Don't get overly pedantic."
Additional to q5 : Year and DayOfWeek should be more than an int.
"There is no need to prepend ""get"" to all methods. These aren't beans."
"enum for month literal, please!!!"
"You read your source many more times that you write it, so the more verbose the method names are the better. Especially for people who will be doing future work with your source base will thank you. The simpler the source code is the better."
"Re getDay() the API should not rely on assumptions or on people reading the javadoc.
Re methods on time w/o date - they are unambiguous without the extra fluff.  What would the minute be if not minute of hour?  If there is also going to be a minute of day method then the extra fluff is required to disambiguated."
toString() formatted understandably
"The most important for me would be ""clear when read"" and ""Unambiguous"" followed by ""balance of short and clear"" when possible"
"All API method names should be clear and unambiguous, whilst trying to striking a balance between conciseness. Some slightly verbose methods is fine when it helps to avoid ambiguity.

The getDay/getDayOfYear/getDayOfWeek methods being a good example of ambiguity. For getDay(), it could take you a while to work out what this meant ""get the day of the what? is it the day of the week or month"". Only when you use javadoc do you see the other day methods, getDayOfWeek/getDayOfYear do you realise that it implicitly means dayOfMonth (as the most common use case). However, once you've written the code, so if someone new comes to review the code, or you yourself come back to the same code a few weeks/months later, you'll be asking the same ""get day of the what?"" question again.

When there is no ambiguity then use concise method, getMonth/getYear/getHour/getMinute/getSecond/getNano."
--
"When I see a date and/or time, I read: year, month, day, hour, minute, second.
Each unit is a portion of the previous unit, that is, there is an expected and understood containership.
If there is a deviation from this pattern, that deviation must be made clear. For example; getDay() would be a value from 0 or 1 to 27 or 31 (depending on month and origin), getDayOfYear() would be a value from 0 or 1 to 364 or 366 (like Julian date), getDayOfWeek() would be an enum (Sunday to Saturday).
A method name like getMonthOfYear, implies that there is a meaning of month that is not part of a year. Given that method name, I would expect other methods for month such as getMonthOfxxx. If this is in fact the case, that months can be a part of something other than a year, then the methods names should be qualified with an Ofxxx suffix.
Additionally, if I saw a method like getMonthOfYear, I would also expect to see a method getYearOfxxx (where xxx might be Gregorian or Mayan etc). I am sure that this is not what is intended by this new date/time class."
"All APIs should be as easy to use as possible, as the latest generations of programmers barely read anything."
Just use Joda Time as the new API :)
Similar to Joda Time
Be similar to JodaTime.
N/A
no
"simply, method define clear,no various."
soon
Shortest possible
The first month must be int 1
Follow human's common sense and convention.
"brief & unambiguous, it's important"
i hope the java source code will be write more comments
"I don't know if it is the case for any country/language/culture but IMHO day, month, hour, minute, ... are always clear and will be read as ""dayOfMonth"", ""monthOfYear"", ""hourOfDay"", ..."
With the method name .. it would be sufficient to read the java doc once and then i think it should be clear that getDay returns the day of the month ..
"Not on naming convention, but a question on the Month Enum, how many methods can it have? A Month has multiple display values (APR, April) and will the Enum have all these values exposed as methods? If these standard operations are not made available, should the Enum be created at all?"
It should be as close to YodaTime naming as it is possible.
"No, have fun deciding."
"length to type is not important - IDEs have auto complete

is there is a possibility of confision then it will occur. Be explicit and non ambiguous"
"No need short names - auto completion is there.
Need to be clear because code is read more than written,
Also being specific in methods naming yields less conflicts
with later adds."
"Alternative for the time-of-day class:
getHour(), getMinute(), getSecond(), getNanoSecond()

Maybe additionally some of:
int getMilli(Second)() // as fraction of a second
int getMicro(Second)() // as fraction of a second

int getSecondOfHour() // as fraction of an hour
int getSecondOfDay() // as fraction of a day
int getSecondOfYear() // as fraction of a year
int getSecondFromZero() // absolute from year 0

int getMilliOfMinute() // as fraction of a minute
int getMilliOfHour() // as fraction of an hour
int getMilliOfDay() // as fraction of a day
long getMilliOfYear() // as fraction of a year
long getMilliFromZero() // absolute from year 0

int getMicroOfMinute() // as fraction of a minute
long getMicroOfHour() // as fraction of an hour
long getMicroOfDay() // as fraction of a day
long getMicroOfYear() // as fraction of a year
long getMicroFromZero() // absolute from year 0

long getNanoOfMinute() // as fraction of a minute
long getNanoOfHour() // as fraction of an hour
long getNanoOfDay() // as fraction of a day
long getNanoOfYear() // as fraction of a year"
take care about i18n.
"natural decomposition is a factor in method naming, and determines the neaning of the simple names.

The natural decomposition of date, is year/month/day so day of year and day of week are secondary and those should have the longer names.

The natural decomposition of time is hour/minute/second/subsecondOfSomeresolution"
Since all major IDE support code assistence/suggestion (e.g. Ctrl-Space in Eclipse) there's no need to think about the shortest possible method names.
"Should correspond to terms used in daily life, e.g normally when we ask which day it is, it is usually day of them month"
"Short method names like getMonth, getDay, getMinute are sufficient because they correspond to how we normally use them in speach and thus don't need additional clarification (though on first use you might want to check the docs just to verify that they're consistent with folk usage of the terms)."
"In your get Day example, week never occurred to me, but day of year vs day of month did.... names must be explicit. Hours of confusion for seconds of savings in typing is not a good trade. If you didn't want to type, you should have picked another profession :) That said, when clarity can be achieved in fewer words it helps with line-length, and thus brevity also helps readability, just not as much as clear method names.

The Month vs MonthOfYear class name question is a mystery to me. Why would this be an issue? Are months ever subject to anything else besides years? What would we confuse it with? Seasons? 

Will we have to input a gps lat/long so that growing zones or a global GIS ecosystems layer are used to calcuate the season? I can just see it now... Season.SPRING, Season.SUMMER, Season.FALL, Season.WINTER... wait, where do we put Season.DRY? (Joke!) :) Please tell me you aren't planning on having MonthOfEpoch! :)"
"while I would normally interpret getDay() as day of week, in the context of a class encapsulating a date, I would interpret it as day of the month"
No
Consider plurals e.g. getSeconds() for numeric results.
